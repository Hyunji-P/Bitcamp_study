[오전수업]

1. Account01 클래스  
   Account01 클래스에서 두사람이 통장을 개설 했다.
   이를 클래스를 이용하여 다시 풀어 봐라.

*생성할 클래스 
	Account02 : 실제 구현할 사용자 정의 클래스
	AccountMain02 : main메소드가 있는 클래스

	(주의)main() 메소드는 무조건 한개!! 

*소프트웨어 모델링 
: 데이터를 나타내고자 하는 경우 , 변수의 갯수 및 데이터 유형을 어떻게 전개해나갈 것인
 가를 정하는 기법을 말한다. 
 이때 필요한 개념이 '클래스'라는 개념이다.
-------------------------------------------------------------------------------------------
* 객체 지향 프로그램 사용이유 ? 
 1. 프로그램이 길어지고 복잡해지면 변수도 많아지고 , 코드 또한 길어져서 해석하는데
    시간이 오래 걸린다(Account01 클래스)
 2. 동일한 목적이나 기능을 하는 변수와 함수를 각각 하나로 묶어서 객체로 만든다
    (김철수soo , 박영희hee )
 3. 그 객체 들끼리 상호 통신하면서 프로그램 전체가 들어가도록 코드 구성한다.
    (Account02 클래스 , AccountMain02 클래스)
 4. 오류 발생 했을 때 프로그램 전체를 살펴보지 않고 각 객체들을 살펴보면서 수정 가능
 5. 훨씬 효율성이 좋고 , 프로그램의 크기도 줄일 수 있다.
 6. 객체를 만들기 위해서 템플릿 코드가 되는 클래스가 필요하기 때문에 
    클래스를 따로 사용하는 이유이다. 

*객체 지향 프로그래밍 순서
 - 객체 지향 프로그래밍(object oriented programming) ex. c++ , 자바
   : 모든 데이터를 하나의 물체처럼 취급해서 프로그래밍 하는 방법
1. 클래스 정의(선언)
2. 객체 생성
3. 멤버 변수의 값 설정 / 지정
4. 데이터 표현 및 연산에 사용하기 등등 

--------------------------------------------------------------------------------------------
1. 클래스(class) 정의(선언)
	사물의 특성들을 소프트웨어적으로 추상화 시켜 모델링해 놓은 것을 말한다.
	객체를 생성해내기 위한 일종의 탬플릿 코드이다.
	기존의 자료형들을 모아서 만드는 새로운 사용자 정의 자료형이다.
   
   *클래스 구성 요소 
	변수 , 메소드 , 생성자 등 

   *클래스 생성 방법 
	[접근지정자] class 클래스 이름{
		변수들 정의
                        메소드들 정의
                        생성자들 정의

	}

 2. 객체(object) : 클래스로 부터 만들어진 의미가 있는 구체적인 물체 
	           클래스를 실제 사용할 수 있도록 만들어진 물체(실체)

  (주의) 생성자의 이름은 반드시 클래스의 이름과 동일해야한다.

    *객체 생성 방법 
	①클래스 이름 객체이름 ;
       	   객체 이름 = new 생성자이름();

	②클래스 이름 객체이름 = new 생성자이름();

3. 멤버 변수의 값 설정/지정 


   *멤버 참조 연산자 : dot(.)

   soo.name = "김철수" ;  // 쓰기 
   출력(hee.name) ; // 읽기

4. 데이터 표현 및 연산에 사용하기 등등 

---------------------------------------------------------------------------------------
<사진>

+ 칠판내용 추가

int x = 3, y = 4 ;
x == y ; // 값 비교 
soo == hee // 참조비교 


x = y ; // 값 변경 
soo = hee ; // 바라보는 메모리 주소 변경 

soo가 원래 참조했던 100번지에 있는 데이터는 소멸됨 (=가비지 컬렉터)
soo는 hee 메모리 주소를 참조함 

가비지 컬렉션 (Garbage Collection) : 더 이상 사용하지 않는 메모리를 찾아서 해제하는 것
가비지 컬렉터 (Garbage Collector) : JVM의  가비지 컬렉션을 하는 역할


*static 변수/메소드
 모든 객체(인스턴스)가 공유하기 위하여 사용하는 변수/메소드를 말한다.
 인스턴스 변수가 중복으로 들어가 있으면 공유 목적으로 사용하는 것이 좋다.
 
 ※ 자바에서 지원하는 클래스 중에서 대표적인 클래스가 Math 클래스이다. 

*static 특징
 클래스 이름으로 접근이 가능하므로 클래스 변수 / 메소드라고 한다.
 main 메소드보다 먼저 메모리에 로딩된다.
 초기 값은 인스턴스 변수의 특징과 동일하다.

*bankname 은 모두 KB로 공유 
 - static 공유영역으로 bankname 인스턴스 변수가 들어감.
 - main 메소드가 실행되기 전에 이미 메모리에 로딩되어 있음 
 
* static 키워드 사용 
 static bankname; (sharable)

2. 통장 2개를 배열로 표현하기
   사람 여러 명에 대한 정보는 배열을 이용하는 것이 편리하다.

  '배열 선언' (클래스 : 기존의 자료형들을 모아서 만드는 새로운 사용자 정의 자료형)
	int [] arr = new int[2]; //자바에서 제공하는 자료형 사용 	

	//통장 2개를 위한 배열 account 를 선언하라.
	Account02 [] account = new Account02[2];

 배열과 관련된 '객체 생성'은 for 구문을 사용하면 된다.
  	for 구문 
		account[i] = new Account02( );

[오후수업]
1. Saram01 , SaramMain01 클래스 
   Ex_Class , Ex_Class_Main 클래스


2. ★★★변수에 대한 실습 

		지역변수		          인스턴스변수	              static변수
생성 위치 	메소드 내부 	          클래스 내부/메소드 외부에 생성  "
생성 시점		메소드 호출 시 	          객체 생성 시 	              main메소드  호출 이전에 미리 생성됨
기본값 		존재 X		          타입별로 존재	              타입별로 존재
초기화 필요성	반드시 초기화 필요           경우에 따라서 초기화 필요함	     "
static 키워드	필요 X		           필요 X			  필요O
this 키워드	사용 X		           사용 O			  사용 X
멤버변수 		X    		            O			  X
목적		메소드 내에서 국소적 사용   객체가 가지는 어떠한 	  모든 객체가 공유
					정보를 저장하기 위함(고유)
기타 		매개변수도 지역변수	non-static 변수		  정적변수 = 클래스 변수
								  정적변수 = static 변수 우리말로만..이해하기
								  주로 사용하는 것은 클래스 변수 

3. final 키워드 
	불변의 진리 또는 변할 수 없는(수정 불가능한) 값을 지정할 때 사용한다.
  	constant(상수) 라고 한다.
	예시) 원주율 pi = 3.141592