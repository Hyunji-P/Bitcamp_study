<오전수업>

https://cafe.naver.com/ugcadman/492


*단축키 
Assist key 속성 : 키워드 몇 글자 입력후 ctrl + Space 누르면 자동완성 
ctrl + space : 자동완성 


[PrintfEx 클래스] 
1. printf() 메소드 : 출력 시 서식을 지정하기 위한 메소드 
	           자체 엔터 기능 없다. 
   
   ※ 서식(format) 
	ex) 
 	소수 둘째 자리까지 표시 	
	전체 몇 자리까지 표시 
	마이너스는 빨간색으로 표시 

   ※ 서식 지정자 
	%d : 정수 
	%c : 문자 1개 
	%s : 문자열 
	%f : 실수 - 기본값이 소수점 이하 6자리까지 표시 
	%m.nf : 전체 m자리이고 , 소수점은 n자리까지 표시
	          단, m과 n은 정수 
                      자릿수를 확보할 때는 소수점도 포함한다. 

2. 형변환 

(신자료형)구자료형 변수

int i ;
double d;
 
(double) i ; // 정수 자료형을 실수 자료형으로 형변환 해라 
 
(int) d ; // 실수 자료형을 정수형으로 형변환 해라 


3. 아스키 코드 : 사용자가 입력한 문자를 컴퓨터는 숫자로 인식한다. 
	        아스키 코드 기반으로 형변환 된다. 
A(65) , a(97) , 0(48)

(char) i ; // 정수 65를 문자 A로 형변환하라. 


4. 연산자 우선순위 

소괄호는 우선 순위를 변경할 수 있다. 

높음	    낮음
단산이관비논조대 
항술항계트리건입 


5. 증감 연산자(PlusMinus01)
   : ++(1씩 증가) , --(1씩 감소)
   : 변수의 좌측 또는 우측에 ++ 또는 --가 붙어 있는 연산자 
   : 변수의 좌측에 있는 항목이 가장 먼저 연산된다. 
   : 변수의 우측에 있는 항목이 가장 나중에 연산된다. 

   ex) int a = 10, b = 20, c;
        c = ++a + b++;

    1) a += 1; 
    2) c = a+b; 
    3) b += 1;


6. 관계연산자(LogicalOperator) = 비교연산자 
   : 2개의 값을 1:1로 비교하는 연산자 
    총 6개 > , >= ,  < , <= , ==(equal) , !=(not equal)
    연산의 결과가 진위형(true , false) 이 된다. 
    (중요)제어문에 사용된다.  


7. 논리연산자 
   : &&(and 연산) , || (or 연산) , !(not) 


   *논리 연산표 
    식 1        식 2       &&        ||
    false	     false       false      false
    false	     true       false      true
    true	     false       false      true
    true	     true       true       true

   * 값     부정 
    false    true
    true    false 



[오후수업]

8. 조건연산자 = 3항 연산자(Condition01) 
  형식 ) 조건식 ? 참일때 수행 : 거짓일때 수행
  조건식 : 참 or 거짓을 의미한다. 

  ※ 조건연산자를 구할 때는 참 , 거짓을 저장할 수 있는 변수 하나를 지정해준다.

ex) x % 2 == 0 : x가 짝수 인가
    x % 3 == 0 : x가 3의 배수인가
    y%x == 0 : y는 x의 약수인가 
    x%3 == 0 || x%5 == 0 : x는 3의 배수이거나 5의 배수인가 

★모르는 내용(복습)
 9. 중첩 조건 연산자 
   ex) x = 10 , y = 15 , z = 78 , large(큰수) ;

       large = x > y ? x 와 z 비교 : y와 z 비교 
       large = x > y ? (x > z ?  x : z ) : (y > z ? y : z ) ;

10 . 캐스팅(Casting) : 필요에 의하여 데이터의 유형을 일시적으로 바꾸는 것 


   * 형변환 예시 오류     
      Type mismatch: cannot convert from double to int

      ① 암시적 캐스팅 
          double d = 100 ; 
          작은 범위 (정수) 의 타입이 큰 범위(실수)의  타입으로 시스템이 알아서 
          바꿔 주는 행위 

      ② 명시적 캐스팅( ex . 형변환 예시 오류)
          큰 범위의 데이터 타입은 시스템이 알아서 처리하지 못한다.
          개발자가 명시적으로 캐스팅을 해줘야 한다.
 
          → (바뀔타입) 바꿀데이터 
             (바뀔타입)을 보통 캐스트 연산자라고 부른다. 
             int는 소수점 데이터는 무조건 버린다. 

11. 문자와 형변환 : 문자들은 아스키 코드로 바뀔 수 있다.

A(65) , a(97) , 0(48)

문자 'A'를 입력하면 시스템이 65로 암시적 형변환해 준다. 

아스키 코드의 특징(암시적 형변환이 숨어있음)
1) 문자 간의 뺄셈이 가능하다. 
   'c' - 'a' = 2 
2) 비교 판단 가능 
   'c' > 'a' 
3) 어떤 문자 ch가 소문자인가? 
   ch가 'a'보다 크거나 같고 , 'z'보다 작거나 같으면
   ch >= 'a' && ch <='z'








