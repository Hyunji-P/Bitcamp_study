[오전 수업]

1.	printf (= print format)
	DecimalFormat
	SimpleDateFormat - Date 클래스와 협업

	→ 더 많은 패턴을 보고 싶을 때 레퍼런스 사이트에서 찾아봐야함 

2. DecimalFormat P.44 풀어보기


- MyException01 클래스 , ExcepTest02클래스

3. 예외(Exception)
	사용상의 부주의로 코딩 잘못으로 인하여 발생하는 오류/경고성 사건

   예외처리 
	예외가 발생하지 않도록 사전 막음 조치를 취하는 것 
	try 는 한번만 적고 catch 는 여러번 적어도 됨

   예외 관련 클래스 계층도 
   Object - Throwalbe - Error
		    - Exception - 나머지 하위 Exception (하위 클래스가 있는 이유는 세분화하기 위해)

   처리방법 
	
	try ... catch 절을 사용한다.

	try{
		예외가 발생할 소지가 있는 코드 	
	}catch(처리담당자 객체){
		해당 예외에 대한 적절한 처리
	}finally{
		예외 발생 여부와 상관없이 무조건 적으로 실행이 된다.
		옵션 사항이지만 반드시 작성 요망
	}

            ① try는 정상적으로 실행이 되는 코드
	② 문제가 생기면 catch해서 객체로 들어가고 
	③ catch 안에 구문을 실행 시킴 
	④ 뭔가 에러가 생기면 try구문은 전체 다 실행이 안됨 

   코딩 방법 
	변수는 try외부에서 선언한다.
	초기화는 초기화 구문에서 처리하도록 한다.


    특징
	try 구문에 catch 절은 여러번 작성해도 무방하다.
	try...catch 구문은 2번 이상 작성해도 무방하다.
	try...catch 구문은 중첩이 가능하다.(try와 catch 안에도 중첩이 가능하다)

    내가 본 예외들
    ArithmeticException
	0으로 나누기 했을 때 발생 

    
    ArrayIndexOutOfBoundsException
	배열 인덱스 잘 못 접근시 발생

    NumberFormatException
	잘못된 형식을 숫자로 변경하려고 할 때 발생

    예외 객체 
	예외가 발생하면 생성되는 객체를 의미한다.
	catch (ArithmeticException ex)에서 ex를 말한다.
	일반적으로 error 또는 err또는 ex라는 이름으로 많이 쓴다.
	
	*사건이 발생하면 아래와 같은 일이 생김 (사건 발생 전은 null이다)
	클래스                객체 = new 생성자() ; 
	ArithmeticException ex  = new ArithmeticException ();

    예외 객체 관련 메소드 
	클래스 : throwable (레퍼런스에서 확인할 것)
	getMessage() : 예외 관련 메세지 내용을 저장하고 있다.
	toString() : 예외 객체가 가지고 있는 문자열을 출력해 준다.
	printStackTrace() : ★무조건 적기!! 
			스택 내용을 추적하여 프린트해준다.
			예외 발생의 근원지를 찾아서 단계별 추적하여 보고자 할 때 사용한다.


- MyException3 클래스
4. 예외처리 떠넘기기 

 console창에 뜨는 에러메세지가 printStrackTrace() 



[오후 수업]

- SoshiMain , GirlsException 클래스

5. 사용자 정의 예외 
	사용자가 직접 만드는 예외 
	throw new 예외객체생성자(매개변수) ;

   작성 방법 
	1) Exception을 상속 받는 사용자 정의 클래스를 구현한다.
	2) 구현하고자 하는 데 필요한 변수 ,메소드 , 생성자 ,오버라이딩등을 구현 한다.
	3) 원하는 위치에 throw 구문을 이용하여 의도적으로 예외를 발생시킨다.
	4) try...catch() 절로 상황에 맞는 예외 처리를 수행해줍니다.
