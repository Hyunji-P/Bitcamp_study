[오전 수업]

110쪽 



* 115쪽 
어노테이션 방법으로 풀어보기 
* package shape.annotation 패키지 

- 실습 순서 기준 

* xml 코딩 
- Namespaces 탭 만들기 
  : xml 문서에 namespace 탭을 보려면 add-on 기능을 추가해야한다. 
    add-on 기능은 *교안 28쪽 ~ 32쪽에 있다. 

- xml 파일 > 우클릭 > open-with > Spring Config Editor 로 열기 

* 네임스페이스 (JSP 교안 110쪽 부근) 

<context:component-scan base-package="shape.annotation" />
context : 네임스페이스를 의미 


xml > 네임스페이스 탭 > context 를 체크해야지 어노테이션을 사용할 수 있음 
* xml 스키마 따로 공부 할 것 

* 순서
1. <context:component-scan base-package=""/>  : 컴포넌트 스캔
  : 패키지 "경로"에 들어 있는  모든 어노테이션들을  bean 으로 등록 시키기 위한 사전 작업 

* 110쪽 ~ 111쪽 
스프링(스프링 설정파일)이 어노테이션(@Component)을 찾아서 객체로 만들어줌 ===> Circle.java 파일 참고 
스프링이 어노테이션을 찾아서 자동으로 bean 등록해준다.

CircleDao  클래스 
CircleDao ---> Circle 로 setter 주입 되어야 한다.
shapeDao 로 주입되려면 관련있는 CircleDao 와 RectangleDao 에도 어노테이션 처리를 한다. 

(*이미지 파일 참고)
shapeDao  변수에는 @Autowired 처리를 한다. 반드시 , required = true 으로 지정한다. 
@Qualifier("어노테이션 객체명") : 만약 A와 B가 있으면 무엇을 의미하는지 모르기 때문에 지정해준다.



2. 메인 
스프링 설정파일 불러오기 
부모 인터페이스로 객체이름 찾기 
메소드 호출 

-----------------------------------------------------------------------------------
* 119쪽 
* package mypkg.config 패키지 

xml 없이 설정파일을 읽어오는 방법 
xml 대신 그 역할을 하는 클래스 상단에 @Configuration 처리

어노테이션 클래스를 불러올 때 
new AnnotationConfigApplicationContext(MyJavaConfig.class) 로 코딩 

@Bean // 메소드 명이 빈의 이름이 된다.
// Member 는 반환타입이면서 객체 -> 스프링에서 bean
public Member myuser() {
	return new Member("hong", "홍길동", 30);
}
-----------------------------------------------------------------------------------
* 127쪽 
AOP 
Aspect Oriented Programing : 관점 지향 프로그램 

* 순서 
* 카페 : 2584번 > ProjectAOP 파일 다운로드
* 파일 새로 만들기
* 132쪽 설정 파일 코딩 

// 추가 (pom.xml)
<dependency>
	<groupId>org.aspectj</groupId>
	<artifactId>aspectjweaver</artifactId>
	<version>1.8.13</version>
</dependency>

----------------------------------------------------------------------------------------
134쪽 
aopexam.sample01 패키지

135쪽 


143쪽 
핵심 기능 빼고 스프링 설정파일에 등재만 해주면 반복적인 코딩 없이 알아서 처리 해줌 

* 구현 순서 기준 
인터페이스 , 클래스 구현 
공통 업무(Aspect) : 로그인 , 로그아웃 , 데이터 베이스
메인 코딩 


* aop 사용 사전 방법
xml 파일 > 네임스페이스  맨 위 주소 체크 

<!-- AOP 설정하기  -->
<!-- mylogin 이라는  aspect 의 login 메소드는  -->
<!-- sample03 패키지 내의 OrderPet의 모든 메소드가 수행 되기 전에 -->
<!-- 실행이 되도록 하겠습니다. -->
<aop:config>
	<aop:aspect ref="myLogin" order="0"> ==> order 는 순서를 의미 
		<aop:before method="login" pointcut="execution(* aopexam.sample03.OrderPet.*())"/>
	</aop:aspect>
</aop:config>

* before 일때 , order  숫자가 작으면 먼저  실행 
* after 일때 , order 숫자가 크면 먼저 실행


136쪽 
정리 
1) aop 먼저 추가 
137쪽 순서 
138쪽 


139쪽 
예시 위주로 공부 


