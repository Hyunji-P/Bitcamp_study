[오전수업]

※ non-static 에러메세지가 나오면 무조건 인스턴스 변수
※ main() 메소드에는 static이 고정적으로 있어야한다.

- StaticTest 클래스

1. static 메소드의 특징 
참조하는(static void main) 		  참조되는		특징 
static  메소드			①인스턴스 변수(x)		반드시 객체를 생성하여 dot(.)연산자로 접근해야 한다.
				②static 변수(static int y)	static이므로 바로 참조가 가능하다.
				③static 메소드 		static이므로 바로 참조가 가능하다.
				④인스턴스 메소드		반드시 객체를 이용하여 dot(.)연산자로 접근해야 한다.

2.static 메소드
  객체와 상관없이 호출될 수 있는 메소드이다.
  static 키워드를 사용한다.
  클래스 이름으로 접근이 가능하다.


3.인스턴스 메소드 
  반드시 객체가 생성이 되어야만 접근이 가능한 메소드이다.
  this 참조 변수 사용이 가능하다.


4. Math 클래스 
   수학과 관련된 기능들을 가지고 있는 클래스 
   모든 변수는 static final 이라는 키워드가 붙어 있다.
   모든 메소드는 static 이라는 키워드가 붙어 있다.
   생성자가 존재하지 않는다.


- AccountMain04 , Account04 클래스

5. ★ 접근지정자(access modifier) 
   변수 및 메소드의 접근 범위를 [어디까지 허용할 것인가]를 나타내는 척도 
   접근 제어자 또는 접근 제한자라고도 한다.

   예시) SNS의 게시글 비공개/공개
          통장 비번 비공개 

   1)지정 방법
	변수나 메소드에 다음과 같은 키워드를 사용하면 된다.
	키워드들은 상호 배타적이다.
	private(비공개) , 기본(동일 패키지에만 공개) , public(공개)
	'기본'은 default를 말한다.

    			private  		기본 		public
동일 클래스		가능		가능		가능
동일 패키지의 모든 클래스	불가능		가능		가능
다른 패키지의 모든 클래스	불가능		불가능		가능

   2) private 변수는 직접 변경이 불가능하므로, 데이터를 외부에 숨기는 개념이다.
      이러한 용어를 캡슐화라고 한다.
      이러한 변수들은 직접 접근이 안되므로, 다른 동작(메소드)으로 간접 접근해야 한다.


- AccountMain05 , Account05 클래스
6. private 변수는 직접 변경이 불가능하다.
   하지만 경우에 따라서는 간접적인 방법으로 읽거나 쓸 수 있도록 public한 메소드를 제공할 수 
   있도록 권장한다.


    1) getter ex.잔액조회
	비공개 변수의 값을 읽어 내기 위한 공개 메소드
	
       setter  ex.입금 , 출금
	비공개 변수의 값을 쓰기 위한 공개 메소드

     		getter 				setter
이름		get + 해당 변수의 첫글자만 대문자     set + 해당 변수의 첫글자만 대문자
반환타입		해당 변수의 타입			void
매개 변수		없음				1개인데 해당 변수의 타입과 동일
						

※메소드 이름은 1개 .. -> 변수이름으로 만듬  -> 그 변수는 각 해당하는 자료형이 있음
  따라서 , 해당하는 매개변수도 다 1개씩만 들어감 
					

[오후수업]	

- Account06, AccountMain06 클래스

7.this 키워드
  객체 내에서 자기 자신을 지칭하는 특수한 레퍼런스 변수이다.
  객체 생성 시 자동으로 생성이 된다.
  객체가 생성될때 heap 메모리에 자동으로 올라가서 내부적으로 숨어있다.
 (static 변수와 다름 . why ? static은 main() 메소드 실행 전 부터 만들어져있으나
  this.변수는 객체를 만들어야지만 생성됨)

  물건이 만들어지면 자기자신을 지칭하는 this 가 만들어지고 
  soo가 호출되면 this = soo ; , this = hee;

  1)this 용도
	"인스턴스 변수"나 메소드임을 강조하기 위하여 사용한다.
    	 매개 변수와 이름이 동일할 때 구분하기 위하여 사용한다.
	 멤버 메소드를 호출시에도 사용 한다.
	 this.변수
	 this.메소드()
    	 this() ;는 생성자를 호출하는 구문이다

※ source > generate getters and setters


-HaksengMain
 총점 / 평균은 파생변수로 지역변수로 만들수 있음 
