[오전 수업]
8. 187쪽
    1) Caller.jsp
       <form 태그> 코딩
    2) web.xml 코딩
       주소지정
       init-param 초기화 파라미터 
       정적이고 데이터가 바뀔 일이 없는 경우 사용    
    3) 168쪽 
        소스코드를 바꿨을 때 (다시 컴파일) : destory()    
    4) CallerServlet 에 코딩
       init , service , doPost , doGet , destroy 오버라이딩 
       출력값 예측해보기 
    5) Callee.jsp 에 최종 결과물을 보여주기 위해 바인딩 
       doPost메소드에 바인딩 할것 (왜? 바인딩 한 결과를 최종 결과물을 보여주는 Calle.jsp파일로 보내줘야하기때문에)
       초기화 파라미터와 파라미터 request에 바인딩 
    6) Callee.jsp에 코딩 
       
9. 188쪽	풀어보기
    	

10. 189쪽  
     가수와 그룹 
     web.xml의 사이즈가 점점 커짐 -> 여기다가 코딩안하고 따로 바깥으로 뺌
     프로젝트 > 우클릭 > new > 서블릿 
     next > url mappings : 서블릿 매핑 , 위에가 초기화 파마리터 > next > 오버라이딩 할거 정함 > finish
     Annotation : 오버라이딩 


11. 172쪽
     서블릿 매핑 
   
------------------------------------------------------------------------------------------------
[오전 수업]
※ 클래스 이름 수정 : F2

1. 191쪽
   1) servletFrom2.jsp 생성 및 코딩
      type 속성 : password - 보이는 것은 텍스트 , 타이핑한 것이 보이면 안됨
   	         hidden - ex) 닉네임을 보여주기 싫을 때 , 눈에는 안보이지만 파라미터로 넘길때
   2) FromServlet2 생성 및 코딩 
      자바 공간에서 어노테이션으로 만듬 
      클래스 이름이 url 기본값이 됨 -> edit 로 변경
      85쪽
      config → 내장객체안에 초기화 파라미터가 들어가있음 
                  초기화 파라미터를 지정해놓으면 config 가 접수를 하고 
                  init 메소드에서 자동으로 config 내장 객체가 딸려옴
      
      *세션 바인딩 작업
      내장객체인 request 를 이용해서 session에 바인딩 작업을 함 
      HttpSession session = request.getSession();
      → jsp에서 session 내장객체를 구하는 것과 동일한 방법임 
      87쪽
      getMethod() : post방식인지 get방식인지 구해주는 메소드 
      getSession() : 세션 내장 객체를 가져오는 메소드

      *포워딩 작업 
       servletTo2.jsp 이동 
       HttpServletRequest request 가 forward매개변수로 들어가서 승급됨 
       dispatcher.forward(request, response); - 매개변수 타입 ServletRequest

       범위 
	HttpServletRequest < ServletRequest

   3) servletTo2.jsp 생성 및 코딩

2. 193쪽
   서블릿 어노테이션 필요 항목 
   initParams 
   urlPatterns

   * urlPatterns 만 필요할 때 (필수 사항)
    @WebServlet("/gagaga")

3. 194쪽 풀어보기 
   

4. 파일 업로드 228~235쪽
   229쪽
   파일 업로드는 post방식으로만 가능함(get방식은 길이의 제한이 있음)

   enctype 속성 :  enctype="multipart/form-data" / 
   
 
  file 을 선택해야 하므로 타입의 속성값은 file임
   cos 라이브러리를 사용
------------------------------------------------------------------------------------------------------------------------
   233쪽
   *순서(정리)
   1) 서블릿 폴더 > uploadSingle.jsp 생성 및 코딩 
       232쪽 코딩 
       결과 값 
       D:\eclipse\박현지\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\MyWeb\upload\
       복사 > d드라이브 폴더에 붙여넣기 > 바로가기 아이콘 만들어 놓기 
       사진을 업로드하면 realPath경로로 업로드됨	   
   2) 54쪽 
      웹페이지 주소 형식 공부하기 

   3) uploadSingle.jsp
      타입 속성 : file (그림이 넘어가야함)
      enctype 속성값 변경 
                 일반적으로 데이터를 넘길 때는 기본값으로 쓰면 되나 
                 그림이나 , 파일은 물건이니 객체형태로 넘겨야함

   4) UploadSingleServlet 클래스 생성 및 코딩 
      doPost() 메소드 코딩
      230쪽
      MultipartRequest : 파일 업로드를 담당하는 클래스
      policy
      ex) 파일을 계속 다운 받으면 이름(1) , 이름(2) 로 중복되어 받아진다.-> 이때 사용
      
      MultipartRequest클래스 객체 생성 , 5가지의 매개변수를 필요로함 
      231쪽 
      파일을 올린다는 것은 객체를 올린다는 것이여서 객체이름.getParameter() 를 사용한다.


   5) singleUploaded.jsp 생성 및 코딩 
       이미지 삽입 
       src="${requestScope.realpath}/${requestScope.uploadFile} 경로 + 이미지이름 
       / 슬래시 : 경로와 이름 구분 

   6) 전송을 누르면 upload 파일에도 업로드 됨 

    234쪽
    *순서
     1) uploadMulti.jsp 
     2) UploadMultiServlet 클래스 생성
     3) multiUploaded.jsp 
        231쪽
        getFileNames() 사용하여 Enumeration 인터페이스 객체에 담음(컬렉션 참고) 
        contentType(내용물의 타입)="text/html 
       우클릭해서 소스보기를 하면 문서가 텍스트 문서임 
       메모장으로 볼수 있지만 형태는 html이다

    245쪽
    ServletConfig > ServletContext
    ex) 서블릿 5개를 만들었을 때 각각의 객체정보를 담고있는것을 config라고 함 
    모든 서블릿이 공유 하자 ->ServletContext(=jsp 로 바뀌면서 application이 됨 , 어플리케이션 내장객체)