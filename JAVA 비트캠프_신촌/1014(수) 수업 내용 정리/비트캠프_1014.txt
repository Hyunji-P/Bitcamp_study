[모르는 내용]
10월 13일
- 정답 예측해보기

* toString 문자열로 정보를 리턴하는 메소드
  필요하면 이 메소드를 사용하라고 함
  반환타입이 문자

<Ref01 클래스>
class Animal {
	int x = 100;

	public void cry() { // 동작 구현
		System.out.println("동물이 짖는다.");

	}

	// super.toString() → Object 클래스(오버라이딩 안되어있음) , Animal → 서브 클래스(오버라이딩 되어있음)
	// 오버라이딩이 안되어 있으면 객체에 대한 정보가 문자열로 출력
	@Override
	public String toString() {
		String imsi = "동물 : " + this.x + "마리";
		return super.toString() + "\n" + imsi;// 1번 + 2번
	}

}

class Dog extends Animal {
	int y = 200;

	// super.toString() → Animal 수퍼 클래스 , Dog → 서브 클래스
	// Animal 수퍼 클래스는 오버라이딩 되어있으나 서브클래스 Dog가 우선적으로 실행 된다.
	@Override
	public String toString() {
		String imsi = "강아지 : " + this.y + "마리";// 3번
		return super.toString() + "\n" + imsi;
	}
}

출력값이 다른이유...
태생이 누구인지를 먼저 보고 그 클래스에도 오버라이딩되어있으면 그 값을 출력한다.


* 클래스 03 숙제

--------------------------------------------------------------------------------------------------
[오전 수업]
1. Polymorphism (다형성)
	다형성이란 부모(상위) 객체를 통해 자식(하위) 객체를 표현하는 방법
	1개의 객체 변수가 경우에 따라서 여러 가지 타입을 취할 수 있다는 개념

	1) 전제 조건 : 두 클래스는 반드시 상속 관계이어야 한다.
	2) 예시 : 레퍼런스 형변환 , 오버로딩(다중 정의) , 오버라이딩(재정의) 
	3) 사용이유  
		- 관리의 편리성  : 부모의 이름으로 자식들을 관리할 수 있다.
		- 코드의 간결성  : 중복되는 코드의 양을 줄일 수 있다.
		- 반복문의 사용  : 수퍼의 개념에서 자식들을 배열로 처리할 수 있다.
				(자식클래스가 많으면 배열로 하는게 좋다.)

 - polymorphism 패키지
   CarMain(Main)
   Car(super)
   Tico(sub)
   Spark(sub)
   Cube(sub)
   Person(사람)

2. 일반화(generalization) 
	보편적이고 일반적인 변수나 메소드는 수퍼에 , 특화된 변수나 메소드는 서브 클래스에 두는 기법

[오후 수업]

3. 14일차 문제 풀기
 

